version: '3.8'

services:

    rabbitmq:
        hostname: my-rabbit
        container_name: rabbit
        image: rabbitmq:3-alpine
        restart: always
        networks:
            - basenet
        ports:
            - '5672:5672'
            - '15672:15672'
        volumes:
            - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

    postgresdb:
        container_name: postgres
        image: postgres:15-alpine
        networks:
            - basenet
        volumes: 
            - pgdata:/var/lib/postgresql/data
        ports:
            - '5435:5432'
        environment:
            - POSTGRES_USERNAME
            - POSTGRES_PASSWORD
            - POSTGRES_DATABASE

    parser:
        build:
            context: ./parser
            dockerfile: Dockerfile
        container_name: parser
        command: >
            sh -c " \
                ./wait-for postgresdb:5432 && \
                ./wait-for rabbitmq:5672 && \
                sh ./docker-entrypoint.sh"
        restart: always
        depends_on:
            - rabbitmq
            - postgresdb
        networks:
            - basenet
        environment:
            - POSTGRES_DATABASE
            - POSTGRES_USERNAME
            - POSTGRES_PASSWORD
            - POSTGRES_HOST
            - POSTGRES_PORT
            - IMAGE_QUEUE
            - IMAGE_ROUTING_KEY
            - IMAGE_EXCHANGE
            - RABBITMQ_HOST
            - RABBITMQ_PORT
            - FETCH_INTERVAL
        volumes: 
            - shared-vol:/usr/src/parser/data

    worker:
        build:
            context: ./worker
            dockerfile: celery.Dockerfile
        container_name: worker
        command: >
            sh -c " \
                ./wait-for rabbitmq:5672 && \
                ./wait-for postgresdb:5432 && \ 
                celery -A worker.main worker"
        restart: always
        networks:
            - basenet
        depends_on:
            - rabbitmq
            - postgresdb
        environment:
            - RABBITMQ_HOST
            - RABBITMQ_PORT
            - IMAGE_EXCHANGE
            - IMAGE_QUEUE
            - IMAGE_ROUTING_KEY
            - RABBITMQ_USERNAME=guest
            - RABBITMQ_PASSWORD=guest
            - POSTGRES_DATABASE
            - POSTGRES_USERNAME
            - POSTGRES_PASSWORD
            - POSTGRES_HOST
            - POSTGRES_PORT

    api:
        build:
            context: ./api
            dockerfile: Dockerfile
        container_name: api
        command: ["./docker-entrypoint.sh" ]
        deploy:
            mode: replicated
            replicas: 1
            restart_policy:
                condition: any
                delay: 1s
                window: 60s
        healthcheck: 
            test: wget --no-verbose --tries=1 --spider http://api:8000 || exit 1 
            interval: 60s
            timeout: 3s
            start_period: 30s
            retries: 3
        networks:
            - basenet
        ports:
            - '8000:8000'
        volumes: 
            - shared-vol:/usr/src/parser/data
        environment:
            - POSTGRES_DATABASE
            - POSTGRES_USERNAME
            - POSTGRES_PASSWORD
            - POSTGRES_HOST
            - POSTGRES_PORT


volumes:
    pgdata:
    shared-vol:

networks:
    basenet:
        driver: bridge
